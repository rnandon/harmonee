@page "/familyDebug"
@using harmonee.Shared
@using harmonee.Client.Services
@using harmonee.Shared.Models
@inject IFamilyService _familyService
@inject IFamilyMemberService _familyMemberService;
@inject IFamilyEventService _familyEventService;
@inject IFamilyListService _familyListService;

<h3>Family Debug</h3>

<h4>Family Created: @FamilyCreated</h4>

@if (Family is null)
{
	<h4>Family not loaded.</h4>
	<button @onclick="ShowCreateFamilyForm">Create New Family</button>

	<InputText @bind-Value="FamilyIdRaw" />
	<button @onclick="GetFamily">Get Family By Id</button>
}
else {
	<h4>Family ID:</h4>
	<p>@Family.Id</p>
	<h4>Family Name: </h4>
	<p>@Family.Name</p>
}

@if (CreateFamilyFormVisible)
{
	// Form to create a new family
	<harmonee.Client.Components.CreateFamilyForm OnFormSubmit="GetFamilyFromForm"/>
}

@code {
	bool CreateFamilyFormVisible = false;
	bool FamilyCreated = false;
	string FamilyIdRaw = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Family? family = null;
		try
		{
			family = await _familyService.GetFamily(FamilyId);
		}
		catch { }
		if (family is not null)
		{
			Family = family;
			var eventsTask = GetEventsAsync();
			var listsTask = GetListsAsync();
			var membersTask = GetMembersAsync();

			await Task.WhenAll(eventsTask, listsTask, membersTask);
		}
	}

	public void ShowCreateFamilyForm()
	{
		CreateFamilyFormVisible = true;
	}

	public void HideCreateFamilyForm()
	{
		CreateFamilyFormVisible = false;
	}

	public async Task GetFamilyFromForm(Family family)
	{
		HideCreateFamilyForm();
		var response = await _familyService.CreateFamily(family);
		if (response is null)
		{
			FamilyCreated = false;
		}
		else
		{
			Family = family;
			FamilyCreated = true;
		}
	}

	public async Task GetFamily()
	{
		if (!Guid.TryParse(FamilyIdRaw, out var familyId))
		{
			return;
		}

		FamilyId = familyId;
		var result = await _familyService.GetFamily(FamilyId);
		if (result is not null)
		{
			Family = result;
		}
	}
}
